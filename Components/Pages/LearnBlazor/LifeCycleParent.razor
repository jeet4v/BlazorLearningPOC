@page "/LifeCycle"

<PageTitle>Blazor Life Cycle</PageTitle>

<h3>Blazor Life Cycle Parent</h3>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button> <br />

<br />
<button class="btn btn-primary" @onclick="StartCountdown">Start Countdown</button> : Counter: @count
<br />


<_LifeCycleChild currentCount="@currentCount"></_LifeCycleChild>

<div class="row">
    @foreach(var eventType in EventType)
    {
        <p>@eventType</p>
        <hr />
    }
</div>

@code {
    private int currentCount = 0;
    private int count = 10;
    private List<string> EventType = new List<string>();

    private void IncrementCount()
    {
        currentCount++;
    }

    protected override void OnInitialized()
    {
        EventType.Add("OnInitialized");
    }

    protected override async Task OnInitializedAsync()
    {
        EventType.Add("OnInitializedAsync");
    }

    protected override void OnParametersSet()
    {
        EventType.Add("OnParametersSet");
    }

    protected override async Task OnParametersSetAsync()
    {
        EventType.Add("OnParametersSetAsync");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            currentCount = 100;
        else
            currentCount = 200;

        EventType.Add("OnAfterRender");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        EventType.Add("OnAfterRenderAsync");
    }

    protected override bool ShouldRender()
    {
        EventType.Add("ShouldRender");
        return true;    // if returning FALSE: changes not reflecting on UI.
    }

    private void StartCountdown()
    {
        var timer = new Timer(TimeCallBack, null, 1000, 500);
    }

    private void TimeCallBack(object state)
    {
        if (count > 0){
            count--;
            InvokeAsync(StateHasChanged);
        }
    }

}
